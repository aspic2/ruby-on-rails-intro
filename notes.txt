NOTES
--------------------------------------------------------------------------------

---------------------------------------
OBJECT ORIENTED RUBY
---------------------------------------
ACCESS CONTROL
How much of each class do you want to expose to the world?
Encapsulation: try to hide the internal representation of the object so you can change it later
Three levels of access: public, protected, and private

`class Car
  def initialize(speed, comfort)
    @rating = speed * comfort
  end

  # Can't SET rating from outside
  def rating
    @rating
  end
end

puts Car.new(4, 5).rating
`

Two ways to specify access control:
1. Specify with keywords public, protected or private
  Everything until the next access control keyword will be of that access control level
  By default Ruby methods are public
2. Define the methods regularly and then specify public, private, protected access levels and list the comma-separated methods under those levels using method symbols.

`class MyAlgorithm
  private
  def test1
    "Private"
  end
  protected
  def test2
    "Protected"
  end
  public
  def public_again
    "Public"
  end
end

class Another
  def test1
    "Private, as declared later on"
  end
  private :test1
end
`

public methods - no access control is enforced. Anybody can call the method

protected methods - can be invoked by the objects of the defining class or its subclasses

private methods - cannot be invoked with an explicit receiver
  Exception: setting an attribute can be invoked with an explicit receiver

`class Person
  def initialize(age)
    self.age = age # LEGAL - EXCEPTION
    puts my_age
    # puts self.my_age #ILLEGAL
                       # CANNOT USE self or any other receiver

  end

  private
  def my_age
    @age
  end
  def age=(age)
    @age = age
  end
end

Person.new(25)
`

public and private access controls are used the most
private methods are not callable from outside or inside the class with an explicit receiver



SCOPE
Methods and Classes begin new scope variables.
Outer scope variables do not carry over into the inner scope
use local_variables method to see which variables are in the current scope

`v1 = "outside"

class MyClass
  def my_method
    # p v1 EXCEPTION THROWN - no such variable exists
    v1 = "inside"
    p v1
    p local_variables
  end
end

p v1
obj = MyClass.new
obj.my_method

p local_variables
p self
`

Constant is any reference that begins with uppercase, including classes and modules
Constants' scope rules are different than variable scope
Inner scope can see constants defined in outer scope and can also override outer constants
  Value remains unchanged outside!

`module Test
  PI = 3.14
  class Test2
    def what_is_pi
      puts PI
    end
  end
end
Test::Test2.new.what_is_pi


module MyModule
  MyConstant = 'Outer Constant'
  class MyClass
    puts MyConstant
    MyConstant = 'Inner Constant'
    puts MyConstant
  end
  puts MyConstant
end
`

Blocks inherit outer scope
Block is a closure
  Remembers the context in which it was defined and uses that context whenever it is called

`class BankAccount
  attr_accessor :id, :amount
  def initialize(id, amount)
    @id = id
    @amount = amount
  end
end

acct1 = BankAccount.new(123, 200)
acct2 = BankAccount.new(321, 100)
acct3 = BankAccount.new(421, -100)
accts = [acct1, acct2, acct3]

total_sum = 0
accts.each do |eachAcct|
  total_sum += eachAcct.amount
end

puts total_sum
`

Even though blocks share the outer scope - a variable created inside the block is only available to the block

Parameters to the block are always local to the block - eve n if they have the same name as variables in the outer scope

Can explicitly declare block-local variables after a semicolon in the block parameter list

`arr = [5, 4, 1]
cur_number = 10
arr.each do |cur_number|
  some_var = 10
  print cur_number.to_s + " "
end
puts
puts cur_number




adjustment = 5
arr.each do |cur_number;adjustment|
  adjustment = 10
  print "#{cur_number + adjustment} "
end
puts
puts adjustment
`

Methods and classes start a new scope
Constants maintain scope
Blocks inherit outer scope
  Can be overridden

MODULES
a module is a container for classes, methods, and constants (or other modules)

is like a Class, but cannot be instantiated
Class inherits from Module and adds new

Modules are used for two purposes
  - namespace
  - mixins

`module Sports
  class Match
    attr_accessor :score
  end
end

module Patterns
  class Match
    attr_accessor :complete
  end
end

match1 = Sports::Match.new
match1.score = 45; puts match1.score

match2 = Patterns::Match.new
match2.complete = true; puts match2.complete
`

Interfaces in OO are a contract: define what a class _could_ do
Mixins provide a way to share ready code among multiple classes

`module SayMyName
  attr_accessor :name
  def print_name
    puts "Name: #{@name}"
  end
end

class Person
  include SayMyName
end
class Company
  include SayMyName
end

person = Person.new
person.name = "Joe"
person.print_name
company = Company.new
company.name = "Google & Microsoft LLC"
company.print_name
`

The Enumerable module is used by Array class and many others
all you must do is provide implementation for the each method

`require_relative 'player' # in file player.rb
require_relative 'team' # in file team.rb

player1 = Player.new("Bob", 13, 5); player2 = Player.new("Jim", 15, 4.5)
player3 = Player.new("Mike", 21, 5); player4 = Player.new("Joe", 14, 5)
player5 = Player.new("Scott", 16, 3)

red_team = Team.new("Red")
red_team.add_players(player1, player2, player3, player4, player5) # (splat)

# select only players between 14 and 20 and reject any player below 4.5 skill-level
elig_players = red_team.select {|player| (14..20) === player.age}.reject{|player| player.skill_level < 4.5}

puts elig_players
`



CLASS INHERITANCE
|| Operator evaluates the left side first
if true, it returns the left side
else it returns the right side
Example: @x = @x || 5 will return 5 the first time and @x the next time
@x || = 5, same as above

`class Person
  attr_reader :age
  attr_accessor :name

  def initialize (name, age)
    @name = name
    self.age = age
  end
  def age= (new_age)
    @age ||= 5
    @age = new_age unless new_age > 120
  end
end
person1 = Person.new("Kim", 130)
puts person1.age
person1.age = 10
puts person1.age
person1.age = 200
puts person1.age
`

Class methods and variables are invoked on the class (not instances)
    Similar to static methods in Java

self outside of the method definition refers to Class object

There are Three ways to define class methods in Ruby
Class variables begin with @@

`class MathFunctions
  def self.double(var)
    times_called; var * 2;
  end
  class << self
    def times_called
      @@times_called ||=0; @@times_called += 1
    end
  end
end
def MathFunctions.triple(var)
  times_called; var * 3
end

# No instance created!
puts MathFunctions.double 5
puts MathFunctions.triple(3)
puts MathFunctions.times_called
`

Every class implicitly inherits from Object
  Object itself inherits from BasicObject

No multiple inheritance
Mixins are used instead

`class Dog
  def to_s
    "Dog"
  end
  def bark
    "barks loudly"
  end
end
class SmallDog < Dog
  def bark
    "barks quietly"
  end
end

dog = Dog.new # (btw, new is a class method)
small_dog = SmallDog.new
puts "#{dog}1 #{dog.bark}"
puts "#{small_dog}2 #{small_dog.bark}"
`



----------

In OOP, you identify "things" that your program is dealing with
You create Classes of those things
Objects will be instances of those things
Objects contain instance variables, or state

Instance variables begin with @
They are not declared. They come into existences when first used
They are available to all instance methods of the class

Objects are created by calling the "new" method of a class
The objects state should be initialized inside the "initialize method"

Instance variables are private to the class and cannot be accessed from outside
But Methods have public access by default
You can define getter and setter methods to access instance variables

`class Person
  def initialize (name, age) # "CONSTRUCTOR"
    @name = name
    @age = age
  end
  def get_info
    @additional_info = "Interesting"
    "Name: #{@name}, age: #{@age}"
  end
end

person1 = Person.new("Joe", 14)
p person1.instance_variables
puts person1.get_info
p person1.instance_variables
person1.name = "Mike"
puts person1.name
# puts person1.age # undefined mehtod `age` for #<Person`

You can use attr_* form to get and set attributes
attr_accessor creates getter and setter methods
attr_reader creates a getter only
attr_writer creates a setter only

`class Person
  attr_accessor :name, :age
end

person1 = Person.new
p person1.name
person1.name = "Mike"
person1.age = 15
puts person1.name
puts person1.age
person1.age = "fifteen"
puts person1.age
`

Inside instance methods, self refers to the object itself
Usually Unneccesary for calling other methods of the same instance
Outside of an instance method, self refers to the class

`class Person
  attr_reader :age
  attr_accessor :name

  def initialize (name, ageVar)
    @name = name
    self.age = ageVar
    puts age
  end
  def age= (new_age)
    @age = new_age unless new_age > 120
  end
end

person1 = Person.new("Kim", 13)
puts "My age is #{person1.age}"
person1.age = 130
puts person1.age
`






HASHES
Indexed collections of object references
created with {} or Hash.new
the Indexes are essentially keys

`editor_props = {"font" => "Arial", "size" => 12, "color" => "red"}

#THE ABOVE IS NOT A BLOCK - IT'S A HASH
puts editor_props.length
puts editor_props["font"]

editor_props["background"] = "Blue"
editor_props.each_pair do |key, value|
  puts "Key: #{key} value: #{value}"
end`


Set hash values with => when creating the hash.
Use [] to edit an already created hash



`word_frequency = Hash.new(0)

sentence = "Chicka chicka boom boom"
sentence.split.each do |word|
  word_frequency[word.downcase] += 1
end

p word_frequency`

In Ruby, hash items stay in the same order they were added.
If you use symbols as your keys, you can use symbol: syntax

If a Hash is the last argument to a method, {} are optional
`family_tree_19 = {oldest: "Jim", older: "Joe", younger: "Jack"}
family_tree_19[:youngest] = "Jeremy"
p family_tree_19

#Named parameter "like" behavior...
def adjust_colors (props = {foreground: "red", background: "white"})
  puts "Foreground: #{props[:foreground]}" if props[:foreground]
  puts "Background: #{props[:background]}" if props[:background]
end
adjust_colors

adjust_colors ({:foreground => "green"})
adjust_colors background: "yella"
adjust_colors :background => "magenta"`

`# Let's say you have a Hash
a_hash = { :one => "one" }

# Then, you output it
puts a_hash

# if you try to do it in one step, you get a SyntaxError
# puts { :one => "one" }

# RUBY GETS CONFUSED AND THINKS {} IS A BLOCK!!!

# To get around this, you can use parens
puts ({ :one => "one" })

#Or drop the {} altogether
puts one: "one"`


RANGES
Used to express natural consecutive sequences (numbers, alphabet, etc)
1..20    'a'.. 'z'
If there are two dots in between the ranges, it is all inclusive.
Three dots means end-exclusive

Ranges are efficient, since you only store the start and end numbers
They can be converted to arrays with to_a

some_range = 1..3
puts some_range.max
puts some_range.include?

puts (1...10) === 5.3
puts ('a'...'r') === "r"

p ('k'..'z').to_a.sample(2)

age = 55
case age
when 0..12 then puts "Still a baby"
when 13..99 then puts "Teenager at heart!"
else puts "You are getting older..."


ARRAYS
Arrays are a collection of object references.
They are auto-expandable
Indexed using []
Can be indexed with negative numbers
Can be different types of objects (strings mixed with floating point #s)
Can use %w{str1 str2} for string array creation

`het_arr = [1, "two", :three] # heterogeneous types
puts het_arr[1]

arr_words = %w{ what a great day today! }
puts arr_words[-2]
puts "#{arr_words.first} - #{arr_words.last}"
p arr_words[-3, 2]

# (Range type covered later...)
p arr_words[2..4]

# Make a String out of array elements separated by ','
puts arr_words.join(',')`

Modify arrays
    Append: push or <<
    Remove: pop or shift
    Set: []= (method)

sample method randomly pulls elements out of an array
sort or reverse with sort! and reverse!

`# You want a stack (LIFO)? Sure
stack = []; stack << "one"; stack.push("two")
puts stack.pop

# You need a queue (FIFO)? We have those too...
queue = []; queue.push "one"; queue.push "two"
puts queue.shift

a = [5,3,4,2].sort!.reverse!
p a
p a.sample(2)

a[6] = 33
p a`

Useful array methods
  each - loop through array
  select - filter array by selecting
  reject - filter array by rejecting
  map - modify each element in the array

`a = [1, 3, 4, 7, 8, 10]
a.each { |num| print num }
puts

new_arr = a.select { |num| num > 4 }
p new_arr
new_arr = a.select { |num| num < 10 }
           .reject{ |num| num.even? }
p new_arr

# Multiply each element by 3 producing new array
new_arr = a.map {|x| x * 3}
p new_arr`


COLLECTIONS AND STRING APIs
STRINGS
Single quote strings in Ruby show almost everything as-is.
    Allow escaping with ` and \

Double-quoted strings allow string interpolation
    (No need to concatenate strings with +)
    Also interpret special characters like \n

def multiply (one, two)
  "#{one} multiplied by {two} equals #{one * two}"
end
  puts multiply(5, 3)

String methods ending with ! modify the existing string
    Most others just return a new string

%Q{long_multiline_string} allows similar behavior to double quoted string

`my_name = " tim"
puts my_name.lstrip.capitalize
p my_name
my_name.lstrip! # (destructive) removes the leading space
my_name[0] = 'K' # replace the first character
puts my_name

cur_weather = %Q{It's a hot day outside
                 Grab your umbrellas...}

cur_weather.lines do |line|
  line.sub! 'hot', 'rainy' # substitute 'hot' with 'rainy'
  puts "#{line.strip}"
end`

Strings API will show you all available methods for strings
ruby-doc.org/core-your.version.number/String.html

Symbols are a type of highly optimized string that "stand for something"
written as :symbol-name
They are constant names that you don't have to pre-declare
Symbols are guaranteed to be unique and immutable
You can convert them to strings by using to_s
or back by using to_sym

Method names are often written as symbols
`[:casecmp, :casecmp?, :downcase, :upcase, :swapcase, :upcase!, :downcase!, :swapcase!]`

some_symbols = "hello".methods.grep /case/
p some_symbols




FUNCTIONS & METHODS
In Ruby, Every function has a method it belongs to, even if it isn't written in a
way that implies that.

Parentheses are optional in Ruby methods

`def simple
  puts "no parens"
end

def simple1()
  puts "yes parens"
end

simple()
simple
simple1`

There is no need to declare type of parameters
You can return any type of value
return keyword is optional. The last executed line is returned

`def add(one, two)
  one + two
end

def divide(one, two)
  return "I don't think so" if two == 0
  one / two
end

puts add(2, 2)
puts divide(2,0)
puts divide(12, 4)`


Ruby methods can end with '?' (usually indicates booleans) and '!'
(usually indicates dangerous side-effects)

`def can_divide_by?(number)
  return false if number.zero?
  true
end

puts can_divide_by? 3
puts can_divide_by? 0`


Default arguments are used if no argument is passed to the method
`def factorial (n)
  n == 0? 1 : n * factorial(n - 1)
end

def factorial_with_default (n = 5)
  n == 0? 1 : n * factorial_with_default(n - 1)
end

puts factorial 5
puts factorial_with_default
puts factorial_with_default(3)`



* prefixes parameter inside method definition.
    Used to allow infinite number of values passed in. Treats them like an array

`def max(one_param, *numbers, another)
  # Variable length parameters passed in
  # become an array
  numbers.max
end

puts max("something", 7, 32, -4, "more")`



BLOCKS
Blocks are chunks of code that you can pass into methods
    Enclosed by curly braces {} when block is single line
    or key words do and end when it spans multiple lines

Blocks can accept parameters between ||s

`1.times { puts "Hello world!"}

2.times do |index|
  if index > 0
    puts index
  end
end

2.times { |index| puts index if index > 0 }`

There are 2 ways to configure a block in your methods

Implicit
    Use block_given? to see if block was passed in
    Use yield to call the block
    **NEED TO CHECK THAT BLOCK WAS GIVEN FIRST OR EXCEPTION WILL BE THROWN**

Explicit
    Use & in front of the last parameter
    Use call method to call the block

`# Implicit block call
def two_times_implicit
  return "No block" unless block_given?
  yield
  yield
end

puts two_times_implicit { print "Hello "}

puts two_times_implicit


#Explicit block call
def two_times_explicit (&i_am_a_block)
  return "No block" if i_am_a_block.nil?
  i_am_a_block.call
  i_am_a_block.call
end

puts two_times_explicit
two_times_explicit {puts "Hello"}`

FILES & ENVIRONMENT VARIABLES

Files are automatically closed at the end of a block

read from Files using the File class and its methods,
i.e. File.foreach(name_of_file.txt) do |line|
  # instructions
end

`File.foreach( 'test.txt' ) do |line|
  puts line
  p line
  p line.chomp # chops off newline character
  p line.split # array of words in line
end`

It is wise to set up exception handling (rescuing) for your file instructions
`begin

  File.foreach( 'do_not_exist.txt' ) do |line|
    puts line.chomp
  end

rescue Exception => e
  puts e.message
  puts "Let's pretend this didn't happen..."
end
`

Writing to files can be as simple as opening a file and using puts
`File.open("test1.txt", "w") do |file|
  file.puts "One line"
  file.puts "Another"
end`

Revisit Module 1 to learn how to set up environment variables on your system.
It is a different process for different OSes

`puts ENV["EDITOR"]
`



Case Expressions
two "flavors"
1. Similar to a series of "if" statements
2. Specify a target next to case and each when clause is compared to target
Only 1 case gets executed
